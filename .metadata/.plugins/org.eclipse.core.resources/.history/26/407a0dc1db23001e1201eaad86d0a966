package com.javatechie.saga.config;

import java.util.function.Consumer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.annotation.Transactional;

import com.javatechie.saga.commons.dto.OrderRequestDto;
import com.javatechie.saga.commons.event.OrderStatus;
import com.javatechie.saga.commons.event.PaymentStatus;
import com.javatechie.saga.entity.PurchaseOrder;
import com.javatechie.saga.repository.OrderRepository;
import com.javatechie.saga.service.OrderStausPublisher;

@Configuration
public class OrderStatusUpdateHandler {

	 @Autowired
	    private OrderRepository repository;

	    @Autowired
	    private OrderStausPublisher publisher;

	    @Transactional
	    public void updateOrder(int id, Consumer<PurchaseOrder> consumer) {
	        repository.findById(id).ifPresent(consumer.andThen(this::updateOrder));
	    }

	    private void updateOrder(PurchaseOrder purchaseOrder) {
	        boolean isPaymentComplete = PaymentStatus.PAYMENT_COMPLETED.equals(purchaseOrder.getPaymentStatus());
	        OrderStatus orderStatus = isPaymentComplete ? OrderStatus.ORDER_COMPLETED : OrderStatus.ORDER_CANCELLED;
	        purchaseOrder.setOrderStatus(orderStatus);
	        if (!isPaymentComplete) {
	            publisher.publishOrderEvent(convertEntityToDto(purchaseOrder), orderStatus);
	        }
	    }

	    public OrderRequestDto convertEntityToDto(PurchaseOrder purchaseOrder) {
	        OrderRequestDto orderRequestDto = new OrderRequestDto();
	        orderRequestDto.setOrderId(purchaseOrder.getId());
	        orderRequestDto.setUserId(purchaseOrder.getUserId());
	        orderRequestDto.setAmount(purchaseOrder.getPrice());
	        orderRequestDto.setProductId(purchaseOrder.getProductId());
	        return orderRequestDto;
	    }
}
